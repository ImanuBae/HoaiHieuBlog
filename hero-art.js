// File: hero-art.js - Hi·ªáu ·ª©ng particles to√†n trang web

let particles = [];
const numParticles = 100;

// L·ªõp Particle (H·∫°t)
class Particle {
  constructor() {
    // V·ªã tr√≠ ng·∫´u nhi√™n ban ƒë·∫ßu
    this.x = random(width);
    this.y = random(height);
    // V·∫≠n t·ªëc ng·∫´u nhi√™n
    this.vx = random(-0.8, 0.8);
    this.vy = random(-0.8, 0.8);
    // K√≠ch th∆∞·ªõc l·ªõn h∆°n ƒë·ªÉ d·ªÖ nh√¨n
    this.size = random(5, 8);
    // M√†u ƒë·ªè cam theo theme website - TƒÇNG ALPHA
    this.color = color(231, 76, 60, 180);
  }

  // C·∫≠p nh·∫≠t v·ªã tr√≠
  update() {
    this.x += this.vx;
    this.y += this.vy;

    // ƒê·∫£o chi·ªÅu n·∫øu ch·∫°m c·∫°nh
    if (this.x < 0 || this.x > width) {
      this.vx *= -1;
    }
    if (this.y < 0 || this.y > height) {
      this.vy *= -1;
    }
  }

  // V·∫Ω h·∫°t
  show() {
    noStroke();
    fill(this.color);
    circle(this.x, this.y, this.size);
  }

  // V·∫Ω ƒë∆∞·ªùng n·ªëi t·ªõi chu·ªôt
  connectMouse() {
    let d = dist(this.x, this.y, mouseX, mouseY);
    
    // N·∫øu chu·ªôt ƒë·ªß g·∫ßn (d∆∞·ªõi 200px)
    if (d < 200) {
      let alpha = map(d, 0, 200, 200, 0);
      stroke(231, 76, 60, alpha);
      strokeWeight(2.5);
      line(this.x, this.y, mouseX, mouseY);
    }
  }

  // K·∫øt n·ªëi v·ªõi c√°c h·∫°t kh√°c g·∫ßn ƒë√≥
  connectParticles(particles) {
    particles.forEach(other => {
      let d = dist(this.x, this.y, other.x, other.y);
      
      // N·∫øu 2 h·∫°t g·∫ßn nhau (d∆∞·ªõi 120px)
      if (d < 120 && d > 0) {
        let alpha = map(d, 0, 120, 100, 0);
        stroke(231, 76, 60, alpha);
        strokeWeight(1.5);
        line(this.x, this.y, other.x, other.y);
      }
    });
  }
}

// === H√ÄM C·ª¶A P5.JS ===

// Ch·∫°y 1 l·∫ßn khi t·∫£i trang
function setup() {
  // T·∫°o canvas to√†n m√†n h√¨nh
  let canvas = createCanvas(windowWidth, windowHeight);
  canvas.parent('global-canvas');
  
  // ƒê·∫∑t canvas ·ªü position fixed
  canvas.style('position', 'fixed');
  canvas.style('top', '0');
  canvas.style('left', '0');
  canvas.style('z-index', '-1');
  canvas.style('pointer-events', 'none');
  
  // Gi·∫£m s·ªë h·∫°t tr√™n mobile ƒë·ªÉ t·ªëi ∆∞u
  const count = windowWidth < 768 ? 40 : numParticles;
  
  // T·∫°o c√°c h·∫°t
  for (let i = 0; i < count; i++) {
    particles.push(new Particle());
  }
  
  // Gi·∫£m FPS tr√™n mobile ƒë·ªÉ ti·∫øt ki·ªám pin
  if (windowWidth < 768) {
    frameRate(30);
  } else {
    frameRate(60);
  }
  
  console.log('‚úÖ Particles initialized:', particles.length);
}

// Ch·∫°y li√™n t·ª•c (60 l·∫ßn/gi√¢y)
function draw() {
  // N·ªÅn TRONG SU·ªêT ƒë·ªÉ nh√¨n th·∫•y n·ªôi dung
  clear();
  
  // C·∫≠p nh·∫≠t v√† v·∫Ω t·ª´ng h·∫°t
  for (let i = 0; i < particles.length; i++) {
    let p = particles[i];
    
    // V·∫Ω k·∫øt n·ªëi v·ªõi h·∫°t kh√°c (ch·ªâ ki·ªÉm tra h·∫°t sau ƒë·ªÉ tr√°nh v·∫Ω 2 l·∫ßn)
    for (let j = i + 1; j < particles.length; j++) {
      let other = particles[j];
      let d = dist(p.x, p.y, other.x, other.y);
      
      if (d < 120) {
        let alpha = map(d, 0, 120, 100, 0);
        stroke(231, 76, 60, alpha);
        strokeWeight(1.5);
        line(p.x, p.y, other.x, other.y);
      }
    }
    
    p.update();
    p.show();
    p.connectMouse();
  }
}

// H√†m n√†y s·∫Ω ƒë∆∞·ª£c g·ªçi m·ªói khi thay ƒë·ªïi k√≠ch th∆∞·ªõc c·ª≠a s·ªï
function windowResized() {
  resizeCanvas(windowWidth, windowHeight);
  
  // C·∫≠p nh·∫≠t l·∫°i s·ªë l∆∞·ª£ng h·∫°t
  const targetCount = windowWidth < 768 ? 40 : numParticles;
  
  if (particles.length > targetCount) {
    particles = particles.slice(0, targetCount);
  } else {
    while (particles.length < targetCount) {
      particles.push(new Particle());
    }
  }
  
  console.log('üîÑ Resized - Particles:', particles.length);
}